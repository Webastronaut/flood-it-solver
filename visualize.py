#!/usr/bin/python3
from __future__ import print_function

output = [[ 1,
  "c(1,2) c(1,3) c(1,4) c(1,5) c(1,6) c(1,7) c(1,8) c(1,9) c(1,10) c(1,11) c(1,12) c(2,4) c(2,5) c(2,6) c(2,7) c(2,8) c(2,9) c(2,10) c(2,11) c(2,12) c(3,1) c(3,3) c(3,4) c(3,5) c(3,6) c(3,7) c(3,8) c(3,9) c(3,10) c(3,11) c(3,12) c(4,1) c(4,2) c(4,3) c(4,4) c(4,5) c(4,6) c(4,7) c(4,8) c(4,9) c(4,10) c(4,11) c(4,12) c(5,1) c(5,2) c(5,3) c(5,4) c(5,5) c(5,6) c(5,7) c(5,8) c(5,9) c(5,10) c(5,11) c(5,12) c(6,1) c(6,2) c(6,3) c(6,4) c(6,5) c(6,6) c(6,7) c(6,8) c(6,9) c(6,10) c(6,11) c(6,12) c(7,1) c(7,2) c(7,3) c(7,4) c(7,5) c(7,6) c(7,7) c(7,8) c(7,9) c(7,10) c(7,11) c(7,12) c(8,1) c(8,2) c(8,3) c(8,4) c(8,5) c(8,6) c(8,7) c(8,8) c(8,9) c(8,10) c(8,11) c(8,12) c(9,1) c(9,2) c(9,3) c(9,4) c(9,5) c(9,6) c(9,7) c(9,8) c(9,9) c(9,10) c(9,11) c(9,12) c(10,1) c(10,2) c(10,3) c(10,4) c(10,5) c(10,6) c(10,7) c(10,8) c(10,9) c(10,10) c(10,11) c(10,12) c(11,1) c(11,2) c(11,3) c(11,4) c(11,5) c(11,6) c(11,7) c(11,8) c(11,9) c(11,10) c(11,11) c(11,12) c(12,1) c(12,2) c(12,3) c(12,4) c(12,5) c(12,6) c(12,7) c(12,8) c(12,9) c(12,10) c(12,11) c(12,12)"],
 [3,
  "c(1,2) c(1,3) c(1,8) c(1,9) c(1,10) c(1,11) c(1,12) c(2,8) c(2,9) c(2,10) c(2,11) c(2,12) c(3,1) c(3,3) c(3,4) c(3,5) c(3,6) c(3,7) c(3,8) c(3,9) c(3,10) c(3,11) c(3,12) c(4,1) c(4,2) c(4,3) c(4,4) c(4,5) c(4,6) c(4,7) c(4,8) c(4,9) c(4,10) c(4,11) c(4,12) c(5,1) c(5,2) c(5,3) c(5,4) c(5,5) c(5,6) c(5,7) c(5,8) c(5,9) c(5,10) c(5,11) c(5,12) c(6,1) c(6,2) c(6,3) c(6,4) c(6,5) c(6,6) c(6,7) c(6,8) c(6,9) c(6,10) c(6,11) c(6,12) c(7,1) c(7,2) c(7,3) c(7,4) c(7,5) c(7,6) c(7,7) c(7,8) c(7,9) c(7,10) c(7,11) c(7,12) c(8,1) c(8,2) c(8,3) c(8,4) c(8,5) c(8,6) c(8,7) c(8,8) c(8,9) c(8,10) c(8,11) c(8,12) c(9,1) c(9,2) c(9,3) c(9,4) c(9,5) c(9,6) c(9,7) c(9,8) c(9,9) c(9,10) c(9,11) c(9,12) c(10,1) c(10,2) c(10,3) c(10,4) c(10,5) c(10,6) c(10,7) c(10,8) c(10,9) c(10,10) c(10,11) c(10,12) c(11,1) c(11,2) c(11,3) c(11,4) c(11,5) c(11,6) c(11,7) c(11,8) c(11,9) c(11,10) c(11,11) c(11,12) c(12,1) c(12,2) c(12,3) c(12,4) c(12,5) c(12,6) c(12,7) c(12,8) c(12,9) c(12,10) c(12,11) c(12,12)"],
 [2,
  "c(1,2) c(1,3) c(1,9) c(1,10) c(1,11) c(1,12) c(2,8) c(2,9) c(2,10) c(2,11) c(2,12) c(3,3) c(3,5) c(3,7) c(3,8) c(3,9) c(3,10) c(3,11) c(3,12) c(4,1) c(4,3) c(4,4) c(4,5) c(4,6) c(4,7) c(4,8) c(4,9) c(4,10) c(4,11) c(4,12) c(5,1) c(5,2) c(5,3) c(5,4) c(5,5) c(5,6) c(5,7) c(5,8) c(5,9) c(5,10) c(5,11) c(5,12) c(6,1) c(6,2) c(6,3) c(6,4) c(6,5) c(6,6) c(6,7) c(6,8) c(6,9) c(6,10) c(6,11) c(6,12) c(7,1) c(7,2) c(7,3) c(7,4) c(7,5) c(7,6) c(7,7) c(7,8) c(7,9) c(7,10) c(7,11) c(7,12) c(8,1) c(8,2) c(8,3) c(8,4) c(8,5) c(8,6) c(8,7) c(8,8) c(8,9) c(8,10) c(8,11) c(8,12) c(9,1) c(9,2) c(9,3) c(9,4) c(9,5) c(9,6) c(9,7) c(9,8) c(9,9) c(9,10) c(9,11) c(9,12) c(10,1) c(10,2) c(10,3) c(10,4) c(10,5) c(10,6) c(10,7) c(10,8) c(10,9) c(10,10) c(10,11) c(10,12) c(11,1) c(11,2) c(11,3) c(11,4) c(11,5) c(11,6) c(11,7) c(11,8) c(11,9) c(11,10) c(11,11) c(11,12) c(12,1) c(12,2) c(12,3) c(12,4) c(12,5) c(12,6) c(12,7) c(12,8) c(12,9) c(12,10) c(12,11) c(12,12)"],
 [4,
  "c(1,9) c(1,10) c(1,11) c(1,12) c(2,8) c(2,9) c(2,10) c(2,11) c(2,12) c(3,5) c(3,8) c(3,9) c(3,10) c(3,11) c(3,12) c(4,1) c(4,3) c(4,4) c(4,5) c(4,7) c(4,8) c(4,9) c(4,10) c(4,11) c(4,12) c(5,1) c(5,3) c(5,4) c(5,5) c(5,6) c(5,7) c(5,8) c(5,9) c(5,10) c(5,11) c(5,12) c(6,1) c(6,2) c(6,3) c(6,4) c(6,5) c(6,6) c(6,7) c(6,8) c(6,9) c(6,10) c(6,11) c(6,12) c(7,1) c(7,2) c(7,3) c(7,4) c(7,5) c(7,6) c(7,7) c(7,8) c(7,9) c(7,10) c(7,11) c(7,12) c(8,1) c(8,2) c(8,3) c(8,4) c(8,5) c(8,6) c(8,7) c(8,8) c(8,9) c(8,10) c(8,11) c(8,12) c(9,1) c(9,2) c(9,3) c(9,4) c(9,5) c(9,6) c(9,7) c(9,8) c(9,9) c(9,10) c(9,11) c(9,12) c(10,1) c(10,2) c(10,3) c(10,4) c(10,5) c(10,6) c(10,7) c(10,8) c(10,9) c(10,10) c(10,11) c(10,12) c(11,1) c(11,2) c(11,3) c(11,4) c(11,5) c(11,6) c(11,7) c(11,8) c(11,9) c(11,10) c(11,11) c(11,12) c(12,1) c(12,2) c(12,3) c(12,4) c(12,5) c(12,6) c(12,7) c(12,8) c(12,9) c(12,10) c(12,11) c(12,12)"],
 [1,
  "c(1,9) c(1,10) c(1,11) c(1,12) c(2,11) c(2,12) c(3,8) c(3,9) c(3,10) c(3,11) c(3,12) c(4,3) c(4,4) c(4,5) c(4,8) c(4,9) c(4,10) c(4,11) c(4,12) c(5,1) c(5,3) c(5,4) c(5,5) c(5,8) c(5,9) c(5,10) c(5,11) c(5,12) c(6,1) c(6,3) c(6,4) c(6,5) c(6,6) c(6,8) c(6,9) c(6,10) c(6,11) c(6,12) c(7,1) c(7,2) c(7,3) c(7,4) c(7,5) c(7,6) c(7,7) c(7,8) c(7,9) c(7,10) c(7,11) c(7,12) c(8,1) c(8,2) c(8,3) c(8,4) c(8,5) c(8,6) c(8,7) c(8,8) c(8,9) c(8,10) c(8,11) c(8,12) c(9,1) c(9,2) c(9,3) c(9,4) c(9,5) c(9,6) c(9,7) c(9,8) c(9,9) c(9,10) c(9,11) c(9,12) c(10,1) c(10,2) c(10,3) c(10,4) c(10,5) c(10,6) c(10,7) c(10,8) c(10,9) c(10,10) c(10,11) c(10,12) c(11,1) c(11,2) c(11,3) c(11,4) c(11,5) c(11,6) c(11,7) c(11,8) c(11,9) c(11,10) c(11,11) c(11,12) c(12,1) c(12,2) c(12,3) c(12,4) c(12,5) c(12,6) c(12,7) c(12,8) c(12,9) c(12,10) c(12,11) c(12,12)"],
 [2,
  "c(1,9) c(1,12) c(2,11) c(2,12) c(3,9) c(3,11) c(3,12) c(4,3) c(4,4) c(4,10) c(4,11) c(4,12) c(5,3) c(5,4) c(5,8) c(5,9) c(5,10) c(5,11) c(5,12) c(6,1) c(6,5) c(6,6) c(6,9) c(6,10) c(6,11) c(6,12) c(7,1) c(7,2) c(7,3) c(7,5) c(7,6) c(7,8) c(7,9) c(7,10) c(7,11) c(7,12) c(8,1) c(8,2) c(8,3) c(8,4) c(8,5) c(8,6) c(8,7) c(8,8) c(8,9) c(8,10) c(8,11) c(8,12) c(9,1) c(9,2) c(9,3) c(9,4) c(9,5) c(9,6) c(9,7) c(9,8) c(9,9) c(9,10) c(9,11) c(9,12) c(10,1) c(10,2) c(10,3) c(10,4) c(10,5) c(10,6) c(10,7) c(10,8) c(10,9) c(10,10) c(10,11) c(10,12) c(11,1) c(11,2) c(11,3) c(11,4) c(11,5) c(11,6) c(11,7) c(11,8) c(11,9) c(11,10) c(11,11) c(11,12) c(12,1) c(12,2) c(12,3) c(12,4) c(12,5) c(12,6) c(12,7) c(12,8) c(12,9) c(12,10) c(12,11) c(12,12)"],
 [3,
  "c(1,12) c(2,12) c(3,11) c(3,12) c(4,10) c(4,11) c(4,12) c(5,8) c(5,9) c(5,10) c(5,11) c(5,12) c(6,10) c(6,11) c(6,12) c(7,1) c(7,2) c(7,3) c(7,6) c(7,8) c(7,9) c(7,10) c(7,11) c(7,12) c(8,1) c(8,2) c(8,5) c(8,6) c(8,7) c(8,8) c(8,9) c(8,10) c(8,11) c(8,12) c(9,1) c(9,2) c(9,4) c(9,5) c(9,6) c(9,7) c(9,8) c(9,9) c(9,10) c(9,11) c(9,12) c(10,1) c(10,2) c(10,3) c(10,4) c(10,5) c(10,6) c(10,7) c(10,8) c(10,9) c(10,10) c(10,11) c(10,12) c(11,1) c(11,2) c(11,3) c(11,4) c(11,5) c(11,6) c(11,7) c(11,8) c(11,9) c(11,10) c(11,11) c(11,12) c(12,1) c(12,2) c(12,3) c(12,4) c(12,5) c(12,6) c(12,7) c(12,8) c(12,9) c(12,10) c(12,11) c(12,12)"],
 [4,
  "c(2,12) c(3,11) c(3,12) c(4,11) c(4,12) c(5,10) c(5,11) c(5,12) c(6,10) c(6,11) c(6,12) c(7,9) c(7,10) c(7,11) c(7,12) c(8,1) c(8,6) c(8,8) c(8,9) c(8,10) c(8,11) c(8,12) c(9,1) c(9,6) c(9,7) c(9,8) c(9,9) c(9,10) c(9,11) c(9,12) c(10,1) c(10,2) c(10,3) c(10,4) c(10,5) c(10,6) c(10,7) c(10,8) c(10,9) c(10,10) c(10,11) c(10,12) c(11,1) c(11,2) c(11,3) c(11,4) c(11,5) c(11,6) c(11,7) c(11,8) c(11,9) c(11,10) c(11,11) c(11,12) c(12,1) c(12,2) c(12,3) c(12,4) c(12,5) c(12,6) c(12,7) c(12,8) c(12,9) c(12,10) c(12,11) c(12,12)"],
 [1,
  "c(2,12) c(3,12) c(4,11) c(4,12) c(5,11) c(5,12) c(6,11) c(6,12) c(7,10) c(7,11) c(7,12) c(8,1) c(8,6) c(8,8) c(8,9) c(8,10) c(8,11) c(8,12) c(9,1) c(9,6) c(9,7) c(9,8) c(9,9) c(9,10) c(9,11) c(9,12) c(10,1) c(10,6) c(10,7) c(10,8) c(10,9) c(10,10) c(10,11) c(10,12) c(11,1) c(11,2) c(11,3) c(11,4) c(11,5) c(11,6) c(11,7) c(11,8) c(11,9) c(11,10) c(11,11) c(11,12) c(12,1) c(12,2) c(12,3) c(12,4) c(12,5) c(12,6) c(12,7) c(12,8) c(12,9) c(12,10) c(12,11) c(12,12)"],
 [4,
  "c(2,12) c(3,12) c(4,11) c(4,12) c(5,12) c(6,12) c(7,12) c(8,1) c(8,6) c(8,8) c(8,9) c(8,11) c(8,12) c(9,1) c(9,6) c(9,7) c(9,8) c(9,9) c(9,10) c(9,11) c(9,12) c(10,1) c(10,8) c(10,9) c(10,10) c(10,11) c(10,12) c(11,1) c(11,2) c(11,4) c(11,5) c(11,7) c(11,8) c(11,9) c(11,10) c(11,11) c(11,12) c(12,1) c(12,2) c(12,3) c(12,4) c(12,5) c(12,6) c(12,7) c(12,8) c(12,9) c(12,10) c(12,11) c(12,12)"],
 [2,
  "c(3,12) c(4,12) c(6,12) c(7,12) c(8,1) c(8,6) c(8,8) c(9,1) c(9,8) c(9,9) c(9,11) c(10,9) c(10,11) c(10,12) c(11,1) c(11,5) c(11,9) c(11,10) c(11,11) c(11,12) c(12,1) c(12,3) c(12,4) c(12,5) c(12,8) c(12,9) c(12,10) c(12,11) c(12,12)"],
 [3,
  "c(7,12) c(9,8) c(9,9) c(10,12) c(11,9) c(11,10) c(11,12) c(12,1) c(12,3) c(12,4) c(12,8) c(12,9) c(12,10)"],
 [1,
  "c(9,9) c(11,9) c(12,8) c(12,9) c(12,10)"],
 [4,
  "c(12,9) c(12,10)"],
 [3,
  "c(12,10)"],
 [2, ""]
]

# max size of board is 30x30
max_size = 30
# create basic grid
grid = [[0 for x in range(max_size)] for y in range(max_size)]
# final board
c = []

# set cell values
def cell(x,y,cl,update=False):
    global c, grid
    x-=1
    y-=1

    # update=true means the flood grows, we want to highlight the cells which are
    # part of the flood, otherwise we print out the number as is
    if update or (x==0 and y==0):
        grid[x][y] = '\u001b[7m' + str(cl) + '\u001b[0m'
    else:
        grid[x][y] = str(cl)

# shrink grid to actual size
def clean_board():
    global c, grid
    for i in range(0, max_size):
        # first item in row not equals zero? add it to the board
        if grid[i][0] != 0:
            c.append(grid[i])
            # remove zeroed items from board (no zero values allowed)
            while c[i][-1] == 0:
                c[i].pop()

# print out board (simple matrix printing)
def print_board():
    for i in range(0, len(c)):
        for j in range(0, len(c)):
            print(c[i][j], end=" ")
        print()
    print()

# 
def process_output():
    global output, c
    n = 1
    for state in output:
        print("State %d -> Choose %d:" % (n, state[0]))
        n += 1
        for i in range(1, len(c)+1):
            for j in range(1, len(c)+1):
                c_str = "c(" + str(i) + "," + str(j) + ")"

                if not c_str in state[1]:
                    cell(i,j,state[0],update=True)
        
        print_board()

def main():
    # first argument is board-encoding, find iter to go through cell() preds and to run cell function
    # second argument is result of telingo solver
    cell(1,1,3)
    cell(1,2,4)
    cell(1,3,4)
    cell(1,4,3)
    cell(1,5,3)
    cell(1,6,3)
    cell(1,7,3)
    cell(1,8,2)
    cell(1,9,3)
    cell(1,10,2)
    cell(1,11,2)
    cell(1,12,4)
    cell(2,1,1)
    cell(2,2,1)
    cell(2,3,1)
    cell(2,4,3)
    cell(2,5,3)
    cell(2,6,3)
    cell(2,7,3)
    cell(2,8,1)
    cell(2,9,1)
    cell(2,10,1)
    cell(2,11,3)
    cell(2,12,2)
    cell(3,1,2)
    cell(3,2,1)
    cell(3,3,4)
    cell(3,4,2)
    cell(3,5,1)
    cell(3,6,2)
    cell(3,7,4)
    cell(3,8,2)
    cell(3,9,3)
    cell(3,10,2)
    cell(3,11,1)
    cell(3,12,3)
    cell(4,1,1)
    cell(4,2,2)
    cell(4,3,3)
    cell(4,4,3)
    cell(4,5,2)
    cell(4,6,4)
    cell(4,7,1)
    cell(4,8,2)
    cell(4,9,2)
    cell(4,10,4)
    cell(4,11,2)
    cell(4,12,3)
    cell(5,1,2)
    cell(5,2,4)
    cell(5,3,3)
    cell(5,4,3)
    cell(5,5,2)
    cell(5,6,1)
    cell(5,7,1)
    cell(5,8,4)
    cell(5,9,4)
    cell(5,10,1)
    cell(5,11,4)
    cell(5,12,2)
    cell(6,1,3)
    cell(6,2,1)
    cell(6,3,2)
    cell(6,4,2)
    cell(6,5,3)
    cell(6,6,3)
    cell(6,7,1)
    cell(6,8,2)
    cell(6,9,3)
    cell(6,10,1)
    cell(6,11,4)
    cell(6,12,3)
    cell(7,1,4)
    cell(7,2,4)
    cell(7,3,4)
    cell(7,4,2)
    cell(7,5,3)
    cell(7,6,4)
    cell(7,7,2)
    cell(7,8,4)
    cell(7,9,1)
    cell(7,10,4)
    cell(7,11,4)
    cell(7,12,1)
    cell(8,1,3)
    cell(8,2,4)
    cell(8,3,3)
    cell(8,4,3)
    cell(8,5,4)
    cell(8,6,3)
    cell(8,7,4)
    cell(8,8,3)
    cell(8,9,2)
    cell(8,10,4)
    cell(8,11,2)
    cell(8,12,2)
    cell(9,1,3)
    cell(9,2,4)
    cell(9,3,3)
    cell(9,4,4)
    cell(9,5,4)
    cell(9,6,2)
    cell(9,7,2)
    cell(9,8,1)
    cell(9,9,4)
    cell(9,10,2)
    cell(9,11,3)
    cell(9,12,2)
    cell(10,1,2)
    cell(10,2,1)
    cell(10,3,1)
    cell(10,4,1)
    cell(10,5,1)
    cell(10,6,4)
    cell(10,7,4)
    cell(10,8,2)
    cell(10,9,3)
    cell(10,10,2)
    cell(10,11,3)
    cell(10,12,1)
    cell(11,1,3)
    cell(11,2,2)
    cell(11,3,4)
    cell(11,4,2)
    cell(11,5,3)
    cell(11,6,4)
    cell(11,7,2)
    cell(11,8,2)
    cell(11,9,4)
    cell(11,10,1)
    cell(11,11,3)
    cell(11,12,1)
    cell(12,1,1)
    cell(12,2,2)
    cell(12,3,1)
    cell(12,4,1)
    cell(12,5,3)
    cell(12,6,2)
    cell(12,7,2)
    cell(12,8,4)
    cell(12,9,3)
    cell(12,10,2)
    cell(12,11,3)
    cell(12,12,3)

    clean_board()
    print("State 0:")
    print_board()
    process_output()

main()